on:
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:

permissions: read-all

env:
  GH_TOKEN: ${{ secrets.E2E_GO_TOKEN }}
  ISSUE_REPOSITORY: slsa-framework/slsa-github-generator
  # WARNING: update build job if CONFIG_FILE changes.
  CONFIG_FILE: .github/configs-go/config-noldflags.yml
  DEFAULT_VERSION: v30.0.0

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.create.outputs.tag }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - id: create
        run: ./.github/workflows/scripts/e2e-create-release.sh

  build:
    needs: [release]
    permissions:
      id-token: write # For signing.
      contents: write # For asset uploads.
      actions: read # For the entrypoint.
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@main
    with:
      go-version: 1.18
      # We cannot use ${{ env.CONFIG_FILE }} because env variables are not available.
      config-file: .github/configs-go/config-noldflags.yml
      compile-builder: true
      upload-tag-name: "${{ needs.release.outputs.tag }}"
      upload-assets: true

  verify:
    runs-on: ubuntu-latest
    needs: [release, build]
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: ${{ needs.build.outputs.go-binary-name }}
      - name: Download provenance
        env:
          PROVENANCE: ${{ needs.build.outputs.go-binary-name }}.intoto.jsonl
          TAG: ${{ needs.release.outputs.tag }}
        run: gh release download "$TAG" -p "$PROVENANCE"
      - uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3.5.0
        with:
          go-version: "1.18"
      - env:
          BINARY: ${{ needs.build.outputs.go-binary-name }}
          PROVENANCE: ${{ needs.build.outputs.go-binary-name }}.intoto.jsonl
        run: ./.github/workflows/scripts/e2e.go.default.verify.sh

  if-succeeded:
    runs-on: ubuntu-latest
    needs: [release, build, verify]
    if: needs.build.result == 'success' && needs.verify.result == 'success'
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - run: ./.github/workflows/scripts/e2e-report-success.sh

  if-failed:
    runs-on: ubuntu-latest
    needs: [release, build, verify]
    if: always() && (needs.build.result == 'failure' || needs.verify.result == 'failure')
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - run: ./.github/workflows/scripts/e2e-report-failure.sh
