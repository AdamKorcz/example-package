# This e2e test performs the following via a GitHub Actions push event.
# - Build the Go application into a Docker image
# - Push the image to ghcr.io
# - Generate SLSA provenance for the image
# - Upload the provenance to ghcr.io
# - Verify the created provenance attestation.

on:
  schedule:
    - cron: "0 3 * * *"
  workflow_dispatch:
  push:
    branches: [branch1]

permissions: {}

env:
  PAT_TOKEN: ${{ secrets.E2E_CONTAINER_TOKEN }}
  GH_TOKEN: ${{ github.token }}
  ISSUE_REPOSITORY: slsa-framework/slsa-github-generator

  IMAGE_REGISTRY: ghcr.io
  # NOTE: This pushes a container image to a "package" under the
  # slsa-framework GitHub org.
  # The image name should be of the form: slsa-framework/example-package.<test name>
  IMAGE_NAME: slsa-framework/example-package.e2e.container.push.branch1.default.slsa3

jobs:
  push:
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
      - run: ./.github/workflows/scripts/e2e-push.sh

  shim:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      continue: ${{ steps.verify.outputs.continue }}
    steps:
      - uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
      - id: verify
        run: |
          set -euo pipefail

          source "./.github/workflows/scripts/e2e-utils.sh"

          BRANCH=$(e2e_this_branch)
          if [[ "$BRANCH" == "$GITHUB_REF_NAME" ]]; then
            echo "::set-output name=continue::yes"
          fi

  # Build the Go application into a Docker image
  # Push the image to ghcr.io
  build:
    needs: [shim]
    if: needs.shim.outputs.continue == 'yes' && github.event_name == 'push' && github.event.head_commit.message == github.workflow
    permissions:
      contents: read # For reading repository contents.
      packages: write # For writing container images.
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c # v2.5.0

      - name: Authenticate Docker
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@507c2f2dc502c992ad446e3d7a5dfbe311567a96 # v4.3.0
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671 # v4.0.0
        id: build
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Output image
        id: image
        run: |
          # NOTE: We need to use the image and digest in order to make sure
          # that the image we attest has not been modified.
          # NOTE: The digest output from docker/build-push-action is of the
          # form "sha256:<digest>"
          image_name="${IMAGE_REGISTRY}/${IMAGE_NAME}"
          echo "::set-output name=image::$image_name"

  # Generate SLSA provenance for the image
  # Upload the provenance to ghcr.io
  provenance:
    needs: [shim, build]
    if: needs.shim.outputs.continue == 'yes' && github.event_name == 'push' && github.event.head_commit.message == github.workflow
    permissions:
      id-token: write # For signing.
      actions: read # For reading workflow info.
      packages: write # For uploading attestations.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@main
    with:
      image: ${{ needs.build.outputs.image }}
      digest: ${{ needs.build.outputs.digest }}
      registry-username: ${{ github.actor }}
      compile-generator: true
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  # Verify the created provenance attestation.
  verify:
    # NOTE: this name is used as the status check name and by protected
    # branches for required status checks. It should have a unique name among
    # other pre-submits.
    needs: [shim, build, provenance]
    if: needs.shim.outputs.continue == 'yes' && github.event_name == 'push' && github.event.head_commit.message == github.workflow
    permissions:
      packages: read # For reading attestations.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
      - uses: sigstore/cosign-installer@9e9de2292db7abb3f51b7f4808d98f0d347a8919 # v3.0.2
      - env:
          REGISTRY_USERNAME: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_NAME: ${{ needs.build.outputs.image }}
          IMAGE_DIGEST: ${{ needs.build.outputs.digest }}
        run: |
          cosign login "${IMAGE_REGISTRY}" -u "${REGISTRY_USERNAME}" -p "${REGISTRY_PASSWORD}"

          # TODO: use --enforce-sct
          # TODO: add cue policy for further validation.
          # NOTE: COSIGN_EXPERIMENTAL is needed to check the transparency log.
          COSIGN_EXPERIMENTAL=1 cosign verify-attestation \
            --type slsaprovenance \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@refs/heads/main \
            "${IMAGE_NAME}@${IMAGE_DIGEST}" > ${GITHUB_WORKSPACE}/provenance.json

          echo "provenance_file=${GITHUB_WORKSPACE}/provenance.json" >> $GITHUB_ENV
          echo "container=${IMAGE_NAME}@${IMAGE_DIGEST}" >> $GITHUB_ENV
      - uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version: "1.18"
      - env:
          CONTAINER: "${{ env.container }}"
          PROVENANCE: "${{ env.provenance_file }}"
        run: ./.github/workflows/scripts/e2e.container.default.verify.sh

  if-succeeded:
    runs-on: ubuntu-latest
    needs: [shim, build, provenance, verify]
    if: needs.shim.outputs.continue == 'yes' && github.event_name == 'push' && github.event.head_commit.message == github.workflow && needs.build.result == 'success' && needs.provenance.result == 'success' && needs.verify.result == 'success'
    steps:
      - uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
      - run: ./.github/workflows/scripts/e2e-report-success.sh

  if-failed:
    runs-on: ubuntu-latest
    needs: [build, provenance, verify]
    if: always() && needs.shim.outputs.continue == 'yes' && github.event_name == 'push' && github.event.head_commit.message == github.workflow && (needs.build.result == 'failure' || needs.provenance.result == 'failure' || needs.verify.result == 'failure')
    steps:
      - uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
      - run: ./.github/workflows/scripts/e2e-report-failure.sh
