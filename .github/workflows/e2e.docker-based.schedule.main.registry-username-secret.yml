on:
  schedule:
    - cron: "0 3 * * *"
  workflow_dispatch:

permissions: read-all

env:
  # TODO: Replace this token.
  PAT_TOKEN: ${{ secrets.E2E_CONTAINER_TOKEN }}
  GH_TOKEN: ${{ github.token }}
  ISSUE_REPOSITORY: slsa-framework/slsa-github-generator

  PROVENANCE_NAME: attestation.intoto

  IMAGE_REGISTRY: ghcr.io
  # NOTE: We reuse the registry-username test image.
  # The image name should be of the form: slsa-framework/example-package.<test name>
  IMAGE_NAME: slsa-framework/example-package.e2e.docker-based.schedule.main.registry-username.slsa3

jobs:
  base:
    runs-on: ubuntu-latest
    permissions:
      contents: read # For reading repository contents.
      packages: write # For writing container images.
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.image.outputs.digest }}
    steps:
      - name: Authenticate Docker
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Output image
        id: image
        run: |
          # NOTE: We need to use the image and digest in order to make sure
          # that the image we attest has not been modified.
          image_name="${IMAGE_REGISTRY}/${IMAGE_NAME}"
          docker pull "$image_name:main"
          repo_digest=$(docker inspect --format='{{index .RepoDigests 0}}' $image_name:main)
          echo $repo_digest

          echo "::set-output name=image::$image_name"
          echo "::set-output name=digest::${repo_digest#*@}"

  build:
    permissions:
      id-token: write # For signing
      actions: read
      contents: write # For asset uploads
    needs: [base]
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_docker-based_slsa3.yml@main
    with:
      builder-image: ${{ needs.base.outputs.image }}
      builder-digest: ${{ needs.base.outputs.digest }}
      config-path: ".github/configs-docker/app-config.toml"
      provenance-name: attestation.intoto
      compile-builder: true
      verbose: true
    secrets:
      registry-username: ${{ github.actor }}
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  verify:
    runs-on: ubuntu-latest
    needs: [base, build]
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - uses: actions/download-artifact@e9ef242655d12993efdcda9058dee2db83a2cb9b
        with:
          name: ${{ needs.build.outputs.build-outputs-name }}
          path: outputs
      - name: Get build artifact
        id: build
        run: |
          name=$(find outputs/ -type f | head -1)
          cp $name .
          echo "name=$(basename $name)" >> $GITHUB_OUTPUT
      - uses: actions/download-artifact@e9ef242655d12993efdcda9058dee2db83a2cb9b
        with:
          name: ${{ needs.build.outputs.attestations-download-name }}
      - uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3.5.0
        with:
          go-version: "1.18"
      - env:
          BINARY: ${{ steps.build.outputs.name }}
          PROVENANCE: attestation.intoto.sigstore
          SLSA_VERIFIER_EXPERIMENTAL: "1"
        run: ./.github/workflows/scripts/e2e.docker-based.default.verify.sh

  if-succeeded:
    runs-on: ubuntu-latest
    needs: [build, verify]
    if: needs.build.result == 'success' && needs.verify.result == 'success'
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - run: ./.github/workflows/scripts/e2e-report-success.sh

  if-failed:
    runs-on: ubuntu-latest
    needs: [build, verify]
    if: always() && (needs.build.result == 'failure' || needs.verify.result == 'failure')
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - run: ./.github/workflows/scripts/e2e-report-failure.sh
