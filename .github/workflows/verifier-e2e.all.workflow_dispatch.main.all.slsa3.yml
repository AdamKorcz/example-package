# This produces a test for the generic workflows for the CLI e2e test.
# The output will be a file binary-linux-amd64-workflow_dispatch and
# its associated provenance that should be moved to the
# cli/slsa-verifier/testdata/gha_generic/$BUILDER_TAG folder.

on:
  workflow_dispatch:
  push:
    tags:
      # We only expect these on a hard-coded set of tags.
      - "v14.2"
      - "v14"
      - "v13.0.30"

permissions: read-all

env:
  PAT_TOKEN: ${{ secrets.E2E_CONTAINER_TOKEN }}
  GH_TOKEN: ${{ github.token }}
  IMAGE_REGISTRY: ghcr.io
  # NOTE: This pushes a container image to a "package" under the
  # slsa-framework GitHub org.
  # The image name should be of the form: slsa-framework/example-package.<test name>
  IMAGE_NAME: slsa-framework/example-package.verifier-e2e.all.tag.main.default.slsa3

jobs:
  generate_name:
    outputs:
      binary-name: ${{ steps.create_name.outputs.binary-name }}
    runs-on: ubuntu-latest
    steps:
      - name: Creates the output name
        id: create_name
        run: |
          if [ ${{ github.event_name == 'workflow_dispatch' }} ]; then
            echo "::set-output name=binary-name::binary-linux-amd64-workflow_dispatch"
            exit 0
          fi
          # This must be a tag event.
          GITHUB_TAG=${{ github.ref_name }}
          echo "::set-output name=binary-name::binary-linux-amd64-v${GITHUB_TAG}"

  build:
    needs: generate_name
    env:
      BINARY_NAME: ${{ needs.generate_name.outputs.binary-name }}
    outputs:
      binary-name: ${{ steps.build.outputs.binary-name }}
      digest: ${{ steps.hash.outputs.digest }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@95c9bf48d0c570bb3e28e57108f3450cd67c1a44 # tag=v2.0.0
        with:
          bazelisk-version: "1.11"
      - name: Build artifact
        id: build
        run: |
          bazelisk build //:hello
          cp bazel-bin/hello_/hello $BINARY_NAME # Copy binary from Bazel path to root
          echo "::set-output name=binary-name::$BINARY_NAME"
      - name: Upload binary
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # tag=v2.3.1
        with:
          name: ${{ steps.build.outputs.binary-name }}
          path: ${{ steps.build.outputs.binary-name }}
          if-no-files-found: error
          retention-days: 5
      - name: Generate hash
        shell: bash
        id: hash
        run: |
          set -euo pipefail
          echo "::set-output name=digest::$(sha256sum $BINARY_NAME | base64 -w0)"

  gha_generic:
    needs: [build]
    permissions:
      id-token: write # For signing.
      contents: write # For asset uploads.
      actions: read # For the entrypoint.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.4.0
    with:
      base64-subjects: "${{ needs.build.outputs.digest }}"
      compile-generator: true

  gha_go:
    permissions:
      id-token: write # For signing.
      contents: write # For asset uploads.
      actions: read # For the entrypoint.
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v1.4.0
    with:
      go-version: 1.18
      # We cannot use ${{ env.CONFIG_FILE }} because env variables are not available.
      config-file: .github/configs-go/config-ldflags-tag-name.yml

  container_build:
    env:
      REGISTRY_USERNAME: "ianlewis"
    permissions:
      contents: read # For reading repository contents.
      packages: write # For writing container images.
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v2.3.4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # tag=v2.0.0

      - name: Authenticate Docker
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # tag=v2.0.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a # tag=v4.0.1
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@e551b19e49efd4e98792db7592c17c09b89db8d8 # tag=v3.0.0
        id: build
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Output image
        id: image
        run: |
          # NOTE: We need to use the image and digest in order to make sure
          # that the image we attest has not been modified.
          # NOTE: The digest output from docker/build-push-action is of the
          # form "sha256:<digest>"
          image_name="${IMAGE_REGISTRY}/${IMAGE_NAME}"
          echo "::set-output name=image::$image_name"

  gha_container:
    needs: container_build
    permissions:
      id-token: write # For signing.
      actions: read # For reading workflow info.
      packages: write # For uploading attestations.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.4.0
    with:
      image: ${{ needs.container_build.outputs.image }}
      digest: ${{ needs.container_build.outputs.digest }}
      registry-username: "ianlewis" # We cannot use env vars here
      compile-generator: true
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  # Delete existing tags before triggering new ones.
  delete-tags:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # tag=v2.4.0
      - id: push
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

          # Dispatch tags v14 v14.2 v13.0.30
          for tag in v14 v14.2 v13.0.30
          do
            GH_TOKEN=${PAT_TOKEN} gh release delete "$tag" -y --cleanup-tag || true
            git push --delete origin "$tag" || true
          done

  # Now dispatch this workflow again with push tags.
  dispatch:
    if: github.event_name == 'workflow_dispatch'
    needs: [delete-tags]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # tag=v2.4.0
      - id: push
        shell: bash
        run: |
          # Dispatch tags v14 v14.2 v13.0.30
          DATE=$(date --utc)
          echo "tagging $GITHUB_SHA"

          for tag in v14 v14.2 v13.0.30
          do
            GH_TOKEN=${PAT_TOKEN} gh release create "$tag" --target main --notes "gha_generic"
          done

